# 2- List all details of actors
DESCRIBE actor;
select * from actor;
# 3. List all customer information from the database:
SELECT * FROM customer;

# 4. List different countries:
SELECT DISTINCT country FROM country;

# 5. Display all active customers:
SELECT * FROM customer WHERE active = 1;

# 6. List of all rental IDs for customer with ID 1:
SELECT rental_id FROM rental WHERE customer_id = 1;

# 7. Display all the films whose rental duration is greater than 5:
SELECT * FROM film WHERE rental_duration > 5;

# 8. List the total number of films whose replacement cost is greater than $15 and less than $20:
SELECT COUNT(*) FROM film WHERE replacement_cost > 15 AND replacement_cost < 20;

# 9. Display the count of unique first names of actors:
SELECT COUNT(DISTINCT first_name) FROM actor;

# 10. Display the first 10 records from the customer table:

SELECT * FROM customer LIMIT 10;

# 11. Display the first 3 records from the customer table whose first name starts with ‘b’:
SELECT * FROM customer WHERE first_name LIKE 'b%' LIMIT 3;

# 12. Display the names of the first 5 movies which are rated as ‘G’:
SELECT title FROM film WHERE rating = 'G' LIMIT 5;

# 13. Find all customers whose first name starts with "a":
SELECT * FROM customer WHERE first_name LIKE 'a%';

# 14. Find all customers whose first name ends with "a":
SELECT * FROM customer WHERE first_name LIKE '%a';

#15. Display the list of the first 4 cities which start and end with ‘a’:
SELECT city FROM city WHERE city LIKE 'a%' AND city LIKE '%a' LIMIT 4;

#16. Find all customers whose first name has "NI" in any position:
SELECT * FROM customer WHERE first_name LIKE '%NI%';

#17. Find all customers whose first name has "r" in the second position:
SELECT * FROM customer WHERE first_name LIKE '_r%';

#18. Find all customers whose first name starts with "a" and are at least 5 characters in length:
SELECT * FROM customer WHERE first_name LIKE 'a%' AND LENGTH(first_name) >= 5;

#19. Find all customers whose first name starts with "a" and ends with "o":
SELECT * FROM customer WHERE first_name LIKE 'a%o';

#20. Get the films with "PG" and "PG-13" rating using the IN operator:
SELECT * FROM film WHERE rating IN ('PG', 'PG-13');

#21. Get the films with length between 50 and 100 using the BETWEEN operator:
SELECT * FROM film WHERE length BETWEEN 50 AND 100;

# 22. Get the top 50 actors using the LIMIT operator:
SELECT * FROM actor LIMIT 50;

#23. Get the distinct film IDs from the inventory table:
SELECT DISTINCT film_id FROM inventory;

-- Functions --
# 1. Retrieve the total number of rentals made in the Sakila database.
SELECT COUNT(*) AS total_rentals FROM rental;

# 2. Find the average rental duration (in days) of movies rented from the Sakila database.
SELECT AVG(rental_duration) AS average_rental_duration FROM film;

#String Functions:
#3. Display the first name and last name of customers in uppercase.
SELECT UPPER(first_name) AS first_name, UPPER(last_name) AS last_name FROM customer;

#4. Extract the month from the rental date and display it alongside the rental ID.
SELECT rental_id, MONTH(rental_date) AS rental_month FROM rental;

#GROUP BY:
#5. Retrieve the count of rentals for each customer (display customer ID and the count of rentals).
SELECT customer_id, COUNT(rental_id) AS rental_count 
FROM rental 
GROUP BY customer_id;

#6. Find the total revenue generated by each store.
SELECT s.store_id, SUM(p.amount) AS total_revenue
FROM payment p
JOIN customer c ON p.customer_id = c.customer_id
JOIN store s ON c.store_id = s.store_id
GROUP BY s.store_id;


#7. Determine the total number of rentals for each category of movies.
SELECT c.name AS category, COUNT(r.rental_id) AS total_rentals
FROM rental r
JOIN inventory i ON r.inventory_id = i.inventory_id
JOIN film f ON i.film_id = f.film_id
JOIN film_category fc ON f.film_id = fc.film_id
JOIN category c ON fc.category_id = c.category_id
GROUP BY c.name;

#8. Find the average rental rate of movies in each language.
SELECT l.name AS language, AVG(f.rental_rate) AS avg_rental_rate
FROM film f
JOIN language l ON f.language_id = l.language_id
GROUP BY l.name;

# 9. Display the title of the movie, customer's first name, and last name who rented it.
SELECT f.title, c.first_name, c.last_name
FROM rental r
JOIN inventory i ON r.inventory_id = i.inventory_id
JOIN film f ON i.film_id = f.film_id
JOIN customer c ON r.customer_id = c.customer_id;


# 10. Retrieve the names of all actors who have appeared in the film "Gone with the Wind ".
SELECT a.first_name, a.last_name
FROM film f
JOIN film_actor fa ON f.film_id = fa.film_id
JOIN actor a ON fa.actor_id = a.actor_id
WHERE f.title = 'Gone with the Wind';

# 11. Retrieve the customer names along with the total amount they've spent on rentals.
SELECT c.first_name, c.last_name, SUM(p.amount) AS total_spent
FROM customer c
JOIN payment p ON c.customer_id = p.customer_id
GROUP BY c.customer_id, c.first_name, c.last_name;

# 12. List the titles of movies rented by each customer in a particular city (e.g., 'London').
SELECT c.first_name, c.last_name, f.title
FROM customer c
JOIN address a ON c.address_id = a.address_id
JOIN city ct ON a.city_id = ct.city_id
JOIN rental r ON c.customer_id = r.customer_id
JOIN inventory i ON r.inventory_id = i.inventory_id
JOIN film f ON i.film_id = f.film_id
WHERE ct.city = 'London'
GROUP BY c.first_name, c.last_name, f.title;


#13. Display the top 5 rented movies along with the number of times they've been rented.

SELECT f.title, COUNT(r.rental_id) AS rental_count
FROM rental r
JOIN inventory i ON r.inventory_id = i.inventory_id
JOIN film f ON i.film_id = f.film_id
GROUP BY f.title
ORDER BY rental_count DESC
LIMIT 5;

# 14. Determine the customers who have rented movies from both stores (store ID 1 and store ID 2).
SELECT c.customer_id, c.first_name, c.last_name
FROM customer c
JOIN rental r ON c.customer_id = r.customer_id
JOIN inventory i ON r.inventory_id = i.inventory_id
JOIN store s ON i.store_id = s.store_id
WHERE s.store_id IN (1, 2)
GROUP BY c.customer_id, c.first_name, c.last_name
HAVING COUNT(DISTINCT s.store_id) = 2;

#Window Functions:

# 1.Rank the customers based on the total amount they've spent on rentals.

SELECT c.customer_id, c.first_name, c.last_name, 
       SUM(p.amount) AS total_spent,
       RANK() OVER (ORDER BY SUM(p.amount) DESC) AS rnk
FROM customer c
JOIN payment p ON c.customer_id = p.customer_id
GROUP BY c.customer_id, c.first_name, c.last_name;

# 2. Calculate the cumulative revenue generated by each film over time.
SELECT f.title, p.payment_date, 
       SUM(p.amount) OVER (PARTITION BY f.film_id ORDER BY p.payment_date) AS cumulative_revenue
FROM payment p
JOIN rental r ON p.rental_id = r.rental_id
JOIN inventory i ON r.inventory_id = i.inventory_id
JOIN film f ON i.film_id = f.film_id;

# 3.Determine the average rental duration for each film, considering films with similar lengths.
SELECT f.title, f.length, f.rental_duration, 
       AVG(f.rental_duration) OVER (PARTITION BY f.length) AS avg_duration_similar_length
FROM film f;

#  4. Identify the top 3 films in each category based on their rental counts.
WITH RankedFilms AS (
    SELECT c.name AS category, f.title, COUNT(r.rental_id) AS rental_count,
           RANK() OVER (PARTITION BY c.category_id ORDER BY COUNT(r.rental_id) DESC) AS rnk
    FROM rental r
    JOIN inventory i ON r.inventory_id = i.inventory_id
    JOIN film f ON i.film_id = f.film_id
    JOIN film_category fc ON f.film_id = fc.film_id
    JOIN category c ON fc.category_id = c.category_id
    GROUP BY c.name, f.title, c.category_id
)
SELECT category, title, rental_count, rnk
FROM RankedFilms
WHERE rnk <= 3;

# 5. Calculate the difference in rental counts between each customer's total rentals and the average rentals across all customers.

SELECT c.customer_id, c.first_name, c.last_name, 
       COUNT(r.rental_id) AS total_rentals,
       AVG(COUNT(r.rental_id)) OVER () AS avg_rentals,
       COUNT(r.rental_id) - AVG(COUNT(r.rental_id)) OVER () AS rental_diff
FROM rental r
JOIN customer c ON r.customer_id = c.customer_id
GROUP BY c.customer_id, c.first_name, c.last_name;


# 6. Find the monthly revenue trend for the entire rental store over time.
SELECT DATE_FORMAT(payment_date, '%Y-%m') AS month, 
       SUM(amount) AS total_revenue,
       SUM(SUM(amount)) OVER (ORDER BY DATE_FORMAT(payment_date, '%Y-%m')) AS cumulative_revenue
FROM payment
GROUP BY month
ORDER BY month;


# 7. Identify the customers whose total spending on rentals falls within the top 20% of all customers.
WITH CustomerSpending AS (
    SELECT c.customer_id, c.first_name, c.last_name, SUM(p.amount) AS total_spent,
           NTILE(5) OVER (ORDER BY SUM(p.amount) DESC) AS spending_rank
    FROM customer c
    JOIN payment p ON c.customer_id = p.customer_id
    GROUP BY c.customer_id, c.first_name, c.last_name
)
SELECT customer_id, first_name, last_name, total_spent
FROM CustomerSpending
WHERE spending_rank = 1;

# 8. Calculate the running total of rentals per category, ordered by rental count.
WITH CategoryRentals AS (
    SELECT c.name AS category, COUNT(r.rental_id) AS rental_count
    FROM rental r
    JOIN inventory i ON r.inventory_id = i.inventory_id
    JOIN film f ON i.film_id = f.film_id
    JOIN film_category fc ON f.film_id = fc.film_id
    JOIN category c ON fc.category_id = c.category_id
    GROUP BY c.name
)
SELECT category, rental_count, 
       SUM(rental_count) OVER (ORDER BY rental_count DESC) AS running_total
FROM CategoryRentals
ORDER BY rental_count DESC;

# 9. Find the films that have been rented less than the average rental count for their respective categories.
WITH FilmRentalCounts AS (
    SELECT f.title, c.name AS category, COUNT(r.rental_id) AS rental_count,
           AVG(COUNT(r.rental_id)) OVER (PARTITION BY c.category_id) AS avg_category_rentals
    FROM rental r
    JOIN inventory i ON r.inventory_id = i.inventory_id
    JOIN film f ON i.film_id = f.film_id
    JOIN film_category fc ON f.film_id = fc.film_id
    JOIN category c ON fc.category_id = c.category_id
    GROUP BY f.title, c.name, c.category_id
)
SELECT title, category, rental_count
FROM FilmRentalCounts
WHERE rental_count < avg_category_rentals;

# 10. Identify the top 5 months with the highest revenue and display the revenue generated in each month.
WITH MonthlyRevenue AS (
    SELECT DATE_FORMAT(payment_date, '%Y-%m') AS month, SUM(amount) AS total_revenue
    FROM payment
    GROUP BY month
)
SELECT month, total_revenue
FROM MonthlyRevenue
ORDER BY total_revenue DESC
LIMIT 5;

/* Normalization Questions
1. First Normal Form (1NF) Violation & Normalization
1NF Rule:

A table must have atomic (indivisible) values.
No repeating groups or arrays.
Example of 1NF Violation in Sakila:

The address table has the column address2, which allows multiple values (two addresses in one row).
Solution:

Remove address2 and create a separate customer_address table.
Normalized Structure:

address table: (address_id, address, district, city_id, postal_code, phone)
customer_address table: (customer_id, address_id)

2. Second Normal Form (2NF) Violation & Normalization
2NF Rule:

Table should be in 1NF.
No partial dependencies (a non-key attribute should depend on the whole primary key).
Example of 2NF Violation in Sakila:

film_actor table (actor_id, film_id, actor_name)
actor_name depends only on actor_id, not the whole primary key (film_id, actor_id).
Solution:

Remove actor_name from film_actor and store it in the actor table.
Normalized Structure:

film_actor table: (film_id, actor_id)
actor table: (actor_id, first_name, last_name)
3. Third Normal Form (3NF) Violation & Normalization
3NF Rule:

Table must be in 2NF.
No transitive dependencies (a non-key attribute should depend only on the primary key).
Example of 3NF Violation in Sakila:

customer table (customer_id, store_id, address, city, country)
city depends on address.
country depends on city.
Solution:

Create separate tables for city and country.
Normalized Structure:

customer table: (customer_id, store_id, address_id)
address table: (address_id, address, city_id)
city table: (city_id, city, country_id)
country table: (country_id, country)
4. Normalization Process (Example)
Unnormalized Form (UNF):

| customer_id | name  | address     | city  | country  | phone      |
|------------|-------|------------|------|---------|------------|
| 1          | John  | 123 St      | NYC  | USA     | 1234567890 |
| 2          | Alice | 456 Ave     | LA   | USA     | 9876543210 |

1NF:

Break down address fields.

| customer_id | name  | address     | city_id |
|------------|-------|------------|---------|
| 1          | John  | 123 St      | 1       |
| 2          | Alice | 456 Ave     | 2       |
Create city table:

| city_id | city | country_id |
|--------|------|------------|
| 1      | NYC  | 1          |
| 2      | LA   | 1          |
Create country table:

| country_id | country |
|-----------|---------|
| 1         | USA     |

2NF:

Remove partial dependencies (e.g., city depends only on address).
Separate into:
customer (customer_id, name, address_id)
address (address_id, address, city_id)
*/

# CTE Queries

# 5. Retrieve distinct actor names & number of films they acted in

WITH ActorFilmCount AS (
    SELECT a.actor_id, a.first_name, a.last_name, COUNT(fa.film_id) AS film_count
    FROM actor a
    JOIN film_actor fa ON a.actor_id = fa.actor_id
    GROUP BY a.actor_id, a.first_name, a.last_name
)
SELECT first_name, last_name, film_count
FROM ActorFilmCount;

# 6. CTE with Joins: Film Title, Language Name, and Rental Rate
WITH FilmDetails AS (
    SELECT f.title, l.name AS language_name, f.rental_rate
    FROM film f
    JOIN language l ON f.language_id = l.language_id
)
SELECT * FROM FilmDetails;

# 7. CTE for Aggregation: Total revenue per customer
WITH CustomerRevenue AS (
    SELECT c.customer_id, c.first_name, c.last_name, SUM(p.amount) AS total_spent
    FROM customer c
    JOIN payment p ON c.customer_id = p.customer_id
    GROUP BY c.customer_id, c.first_name, c.last_name
)
SELECT * FROM CustomerRevenue;

#8. CTE with Window Functions: Rank Films by Rental Duration

WITH FilmRanking AS (
    SELECT title, rental_duration, 
           RANK() OVER (ORDER BY rental_duration DESC) AS rnk
    FROM film
)
SELECT * FROM FilmRanking;

#9. CTE and Filtering: Customers with more than 2 rentals

WITH FrequentCustomers AS (
    SELECT customer_id, COUNT(rental_id) AS rental_count
    FROM rental
    GROUP BY customer_id
    HAVING rental_count > 2
)
SELECT c.customer_id, c.first_name, c.last_name
FROM customer c
JOIN FrequentCustomers fc ON c.customer_id = fc.customer_id;

# 10. CTE for Date Calculations: Monthly Rentals

WITH MonthlyRentals AS (
    SELECT DATE_FORMAT(rental_date, '%Y-%m') AS month, COUNT(*) AS total_rentals
    FROM rental
    GROUP BY month
)
SELECT * FROM MonthlyRentals;

#11. CTE and Self-Join: Find pairs of actors in the same film

WITH ActorPairs AS (
    SELECT fa1.actor_id AS actor1, fa2.actor_id AS actor2, fa1.film_id
    FROM film_actor fa1
    JOIN film_actor fa2 ON fa1.film_id = fa2.film_id AND fa1.actor_id < fa2.actor_id
)
SELECT a1.first_name AS actor1_name, a2.first_name AS actor2_name, f.title
FROM ActorPairs ap
JOIN actor a1 ON ap.actor1 = a1.actor_id
JOIN actor a2 ON ap.actor2 = a2.actor_id
JOIN film f ON ap.film_id = f.film_id;

#12. Recursive CTE: Find Employees Reporting to a Manager

WITH RECURSIVE EmployeeHierarchy AS (
    SELECT staff_id, first_name, last_name, reports_to AS manager_id, 1 AS level
    FROM staff
    WHERE reports_to IS NOT NULL
    UNION ALL
    SELECT s.staff_id, s.first_name, s.last_name, s.reports_to, eh.level + 1
    FROM staff s
    JOIN EmployeeHierarchy eh ON s.reports_to = eh.staff_id
)
SELECT * FROM EmployeeHierarchy;





